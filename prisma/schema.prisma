datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  feeds         Feed[]
  savedArticles SavedArticle[]
  tags          Tag[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feed {
  id              Int       @id @default(autoincrement())
  userId          String
  url             String
  title           String
  description     String?
  siteUrl         String?
  faviconUrl      String?
  lastFetchedAt   DateTime?
  lastError       String?
  errorCount      Int       @default(0)
  fetchInterval   Int       @default(900)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  articles        Article[]
  tags            FeedTag[]

  @@unique([userId, url])
  @@index([userId])
  @@index([isActive])
}

model Article {
  id            Int       @id @default(autoincrement())
  feedId        Int
  guid          String
  title         String
  url           String
  author        String?
  content       String?
  summary       String?
  publishedAt   DateTime?
  isRead        Boolean   @default(false)
  isStarred     Boolean   @default(false)
  readAt        DateTime?
  createdAt     DateTime  @default(now())

  feed          Feed            @relation(fields: [feedId], references: [id], onDelete: Cascade)
  savedBy       SavedArticle[]

  @@unique([feedId, guid])
  @@index([feedId, isRead])
  @@index([publishedAt(sort: Desc)])
}

model SavedArticle {
  id        Int      @id @default(autoincrement())
  userId    String
  articleId Int
  savedAt   DateTime @default(now())
  note      String?

  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article           @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tags      SavedArticleTag[]

  @@unique([userId, articleId])
  @@index([userId, savedAt])
}

model Tag {
  id        Int      @id @default(autoincrement())
  userId    String
  name      String
  color     String?
  createdAt DateTime @default(now())

  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  feeds         FeedTag[]
  savedArticles SavedArticleTag[]

  @@unique([userId, name])
  @@index([userId])
}

model FeedTag {
  feedId   Int
  tagId    Int
  taggedAt DateTime @default(now())

  feed Feed @relation(fields: [feedId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([feedId, tagId])
}

model SavedArticleTag {
  savedArticleId Int
  tagId          Int
  taggedAt       DateTime @default(now())

  savedArticle SavedArticle @relation(fields: [savedArticleId], references: [id], onDelete: Cascade)
  tag          Tag          @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([savedArticleId, tagId])
}
